# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    # create Hand object
    def __init__(self):
        self.cards = []	
    # return a string representation of a hand
    def __str__(self):
        cards_str = ""
        for i in range(len(self.cards)):
            cards_str += (self.cards[i].__str__() + " ")
        return "Hand contains " + cards_str
    # add a card object to a hand
    def add_card(self, card):
        self.cards.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        v = 0
        for card in self.cards:
            for key, value in VALUES.items():
                if card.get_rank() == key:
                    v += value
                    if card.get_rank() == 'A':
                        if v + 10 <= 21:
                            v += 10
        return v
   
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method 
        for i in range(len(self.cards)):
            self.cards[i].draw(canvas, [pos[0] + 108*i, pos[1]])
        
    
# define deck class 
class Deck:
    def __init__(self):
        self.deckcards = []
        for s in SUITS:
            for r in RANKS:
                self.deckcards.append(Card(s,r))

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deckcards)

    def deal_card(self):
        return self.deckcards.pop()
    
    def __str__(self):
        deckcards_str = ""
        for i in range(len(self.deckcards)):
            deckcards_str += (self.deckcards[i].__str__() + " ")
        return "Deck contains " + deckcards_str      



#define event handlers for buttons
def deal():
    global outcome, in_play, score
    
    global mydeck, phand, dhand

    if in_play:
        print "You lost now"
        outcome = "You just lost. Now, Hit or Stand?"
        score -= 1
    else:
        outcome = "Hit or Stand?"
    
    mydeck = Deck()
    mydeck.shuffle()
    print mydeck
    phand = Hand()
    dhand = Hand()
    phand.add_card(mydeck.deal_card())
    phand.add_card(mydeck.deal_card())
    dhand.add_card(mydeck.deal_card())
    dhand.add_card(mydeck.deal_card())
    
    print "phand " + phand.__str__()
    print "dhand " + dhand.__str__()
    print mydeck
    
    in_play = True
    
    
def hit():
    global in_play, outcome, score
    global phand
    
    # if the hand is in play, hit the player
    if in_play and phand.get_value() <= 21:
        phand.add_card(mydeck.deal_card())
        if phand.get_value() > 21:
            print "You went bust."
            outcome = "You went bust and lose.."
            score -= 1
            in_play = False
    
        
    # if busted, assign a message to outcome, update in_play and score
       
        
def stand():
    global in_play, outcome, score
    global dhand
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if phand.get_value() > 21:
        print "You went bust and lose.."
    elif in_play:
        while dhand.get_value() < 17:
            dhand.add_card(mydeck.deal_card())
        
        if dhand.get_value() > 21:
            print "Dealer has busted."
            outcome = "Dealer went bust. You won!"
            score += 1
        else:
            if phand.get_value() <= dhand.get_value():
                print "D won"
                outcome = "Oops.. Dealer won. New deal?"
                score -= 1
            else:
                print "You won"
                outcome = "You won! Feel like a new deal?"
                score += 1
        in_play = False
         
    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("Blackjack", (30, 70), 50,'Black','monospace')
    canvas.draw_text("Dealer", (55, 180), 30,'Black','monospace')
    canvas.draw_text("Player", (55, 380), 30,'White','monospace')
    canvas.draw_text(outcome, (200, 380), 30,'White')
    
    phand.draw(canvas,[50,400])
    dhand.draw(canvas,[50,200])
    
    # cover logic
    if in_play:
        canvas.draw_image(card_back,(CARD_CENTER[0],CARD_CENTER[1]),CARD_SIZE,[50+CARD_CENTER[0],200+CARD_CENTER[1]],CARD_SIZE)
        
     
    canvas.draw_text("Score " + str(score),(400, 70), 30,'White')    
        

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
